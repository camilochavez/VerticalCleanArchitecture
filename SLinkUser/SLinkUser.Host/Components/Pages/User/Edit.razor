@page "/User/Edit/{id:int}"
@using SLinkUser.Host.Model

@rendermode @(new InteractiveServerRenderMode(prerender: false))

<PageTitle>Edit</PageTitle>

<h1>Edit</h1>
<h4>User</h4>
<hr />
@if (user == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="row">
        <div class="col-md-4">

            <EditForm Model="@user" OnValidSubmit="@HandleValidSubmit" Context="editUser">
                <dl class="row">
                    <dt class="col-sm-2">
                        @nameof(UserDTO.Id)
                    </dt>
                    <dd class="col-sm-10">
                        @user.Id
                    </dd>
                    <dt class="col-sm-2">
                        @nameof(UserDTO.Name)
                    </dt>
                    <dd class="col-sm-10">
                        @user.Name
                    </dd>
                </dl>
                <DataAnnotationsValidator />
                <ValidationSummary />

                <div class="form-group">
                    <label class="control-label">@nameof(UserToUpdate.Username)</label>
                    <InputText @bind-Value="user.Username" class="form-control" />
                    <ValidationMessage For="@(() => user.Username)" class="text-danger" />
                </div>

                <div class="form-group">
                    <input type="submit" value="Save" class="btn btn-primary" />
                </div>


            </EditForm>

        </div>
    </div>

    <div>
        <a href="/User">Back to List</a>
    </div>

}

@code {

    [Parameter]
    public int id { get; set; }

    private UserToUpdate? user;

    protected override async Task OnInitializedAsync()
    {
        if (user == null)
        {
            var data = await UserClientService.GetUserByIdAsync(id);
            data = data ?? new UserDTO();
            user = new UserToUpdate
                {
                    Id = data.Id,
                    Name = data.Name,
                    Username = data.Username
                };
        }
    }

    private async void HandleValidSubmit()
    {
        if (user is null) return;

        bool result = await UserClientService.UpdateUserByIdAsync(new Model.UserUpdateRequest(user.Id, user.Username!));
        if (result)
            NavigationManager.NavigateTo("/User");
    }
}
